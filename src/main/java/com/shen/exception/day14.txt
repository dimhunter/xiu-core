Exception
 
 1  Throwable(运行时可能碰到的任何问题的总称)
     ---->Error (非常严重的错误，系统不要求程序员处理，也处理不了)
     ---->Exception(从代码的角度是程序员可以处理的问题，异常，例外)
               异常是运行时概念     
          ---> UncheckedExcepiton(RuntimeException)
                程序员小心谨慎完全可以避免的异常，系统不要求程序员
                处理（可以不管）
                3/0，数组下标越界，NullPointerException，类型转换异常
          --->CheckedException（已检查异常）
               系统要求必须处理  
 
 2  异常的处理
     1.声明抛弃异常（消极的处理）： 
       throws :“抛弃”，写在方法名的定义上，后面跟要抛弃的异常类型
       异常产生时，责任可能并不在当前方法，向外抛弃可以让异常
       找到一个最佳的位置处理 
       抛弃过程中可以对异常类型进行扩展，但是不能缩小 
       
       当代码出现异常时，代码不会向下执行，Jvm会将异常封装成
       相应的异常类的对象，向外抛出
        
       throw: “抛出”，出现在方法的实现里，用来抛出异常对象，
                  throw后面跟异常对象   
                  
       方法的返回值：
                 1 正常运行，要求方法必须返回定义的类型的值
                 2 非正常结束（出异常），方法返回的是异常对象 
            
       方法覆盖： 名相同，参数相同，返回类型相同
                        访问权限不能更小
                        抛弃的异常不能更多
       
     2. try--catch  （积极的处理）：
         一个try语句后可以跟多个catch；catch时子类先写，父类
         后写，如果没有父子关系，先后无所谓  
         @@@@@@@@@@@@;
         try{ 
         	//可能会产生异常的代码
            1 **********;
            2 &&&&&&&&&;
            3%%%%%%%%;   	
         }catch(Exception1 e){ 
             4 ######## ;
         } catch(Exception2 e2){ 
             5 $$$$$$$$$$$$$$;
         }finally{    
         	//不管有没有异常出现都要执行的代码    
         	// 当try  catch 里出现了System.exit(0),finally 不在执行
         	6 ！！！！！！！！！！！！；
         } 
          7 ^^^^^^^^^^^^^;
      第一种：如果1，2，3没产生任何异常，3执行后直接执行6，然后是7
      第二种：如果2产生异常 ，3不会被执行，直接跳出try{},
                   匹配第一个catch，和catch里定义的类型一致，执行4，
                   随后执行6，7；如果不一致，再匹配catch2，相同执行5，
                   随后执行6，7；如果和 catch2不同，语法错误
 
     3.   try   catch   finally
          try--------catch
          try--------finally  
                 
          
 3    1) throws  throw   Throwable
     2) final   finalize()   finally 
     3) String   StringBuffer   
     
4  自定义异常类型（业务异常）
    class MyException extends Exception{  
        public MyException(String str){ 
	 	 			super(str);
			}
    }     