位（bit）: 
	数据传输是以“位”（bit）为单位，一个位就代表一个0或1（即二进制），每8个位（bit）组成一个字节（Byte）。8bit=1Byte 注意1b不等于1B。
	
	
	1KB = 1024Byte = 1024×8bit
 

字节（Byte）: 

字节是指一小组相邻的二进制数码。通常是8位作为一个字节。它是构成信息的一个小单位，并作为一个整体来参加操作，比字小，是构成字的单位。
在微型计算机中，通常用多少字节来表示存储器的存储容量。
例如，

在C++的数据类型表示中，通常char为1个字节，int为4个字节，double为8个字节。

char 在java中是2个字节。java采用unicode，2个字节（16位）来表示一个字符。

通常gbk/gb2312是2个字节，utf-8是3个字节。

如果不指定encoding则取系统默认的encoding。




char是Java中的保留字，与别的语言不同的是，char在Java中是16位的，因为Java用的是Unicode。不过8位的ASCII码包含在Unicode中，是从0~127的。

Java中使用Unicode的原因是，Java的Applet允许全世界范围内运行，那它就需要一种可以表述人类所有语言的字符编码。Unicode。但是English，Spanish，German, French根本不需要这么表示，所以它们其实采用ASCII码会更高效。这中间就存在一个权衡问题。

因为char是16位的，采取的Unicode的编码方式，所以char就有以下的初始化方式：

char c='c'; //字符，可以是汉字，因为是Unicode编码

char c=十进制数，八进制数，十六进制数等等; //可以用整数赋值

char c='\u数字'; //用字符的编码值来初始化，如：char='\0',表示结束符，它的ascll码是0，这句话的意思和 char c=0 是一个意思。



不同数量级间

数据存储是以10进制表示，数据传输是以2进制表示的，所以1KB不等于1000B。
1KB=1024B；1MB=1024KB=1024×1024B。其中1024=210。
1B（byte，字节）= 8 bit（见下文）；
1KB（Kibibyte，千字节）=1024B= 2^10 B；
1MB（Mebibyte，兆字节，百万字节，简称“兆”）=1024KB= 2^20 B；




进制转换算法？？？？？



